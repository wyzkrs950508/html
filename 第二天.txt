一、运算符
1.算术运算符
  -、*、/、%会发生隐式类型转换
  一元运算符：
             ++自增运算符
             --自减运算符
  二元运算符：至少需要两个数的运算
  比较运算符（关系运算符）：
        返回结果为布尔值
        < <= > >= ==(判断是否相等）！=（不等）
        ===值和类型都要相等
        ！==值和类型都不相等
  逻辑运算符（布尔运算符）：可以同时判断多个条件
        && 与（并且）true&&true=》true 
        || 或者 只要有一个条件成立就行
         ！非  ！true=》false   ！false=》true
  赋值运算符：将运算符右侧的数值赋值给左边的变量
        =    n1+=20=>n1=n1+20
             n1-=20=>n1=n1-20
             n1*=20=>n1=n1*20
             n1/=20=>n1=n1/20
             n1%=20=>n1=n1%20
   优先级：（）
            一元运算符
            数算运算符
            关系运算符
            比较
            逻辑
            赋值
二、流程控制
1、顺序结构
   默认从上到下
2、分支结构
   if（条件）{
     代码
       }条件要能转换为布尔值
     else{
      if不成立执行的代码
       }

  多个条件
   if（条件一）{
     }else if（条件二）{
     }else if（条件三）{
     }else{
     }

三元运算符
 如果条件成立执行代码一否则执行代码二  
age》=18？console.log（“成年”）：console.log（“未成年”）；
表达式1？（表达式2？表达式3：表达式4）：表达式5


switch语句
switch（变量）{
   case 值一：    case 1:
    代码          case 2:
    brreak；      console.log(2);
   case 值二:     break;(可这样写）
    代码
    break； 
  default：
    代码；
   }
switch内部用的是全等===
break跳出switch语句



循环while语句
while语法
while（循环的条件）{
    代码   
    }
  while中可以写if语句

  代码只有一行时可省略大括号
  if（000）break；


do{
代码

  }while();
  先执行代码再判断如果条件成立继续执行
  不成立则跳出循环


for循环
  for（初始化计数器；循环条件；改变
       循环条件语句）{
         代码
       }
for（var i=0； i<=100；i++）{
console.log（i）}
1.初始化计数器
2.循环条件
3.循环体
4.i++
5.循环条件


document.write("");正在页面中输出































          